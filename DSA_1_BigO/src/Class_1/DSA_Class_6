Rules of Big O
 
Rule number 1: Worst Case

const nemo = ['nemo', 'test', 'two', 'three', 'four'];

function findNemo(array) {
  for (let i = 0; i < array.length; i++) {
    console.log('running');
    if (array[i] == 'nemo') {
      console.log('Found Nemo');
      break;
    }
  }
}
findNemo(nemo);

even if we have found the nemo and break the loop but what will happen if it will be in the last?
	our loop will execute until we find nemo.
	
best case can be if we have nemo at the beginning and worst case will be if we have nemo at the end.

----------------------

Rule 2: Remove constants. DSA_Class_6_1.java
we never use the numbers in our big O notations but in few cases we can use it.

we dont case how steap our graph is just we have to see if its a diagonal straight line then it is linear.

function printFirstItemThenFirstHalfThenSayHi100Times(items){
  console.log(items[0]);
  var middleIndex = Math.floor(items.length/2);
  var index = 0;
  while(index < middleIndex){
    console.log(items[index]);
    index++;
  }
  for(var i = 0; i < 100; i++){
    console.log('hi');
  }
}
// Big O(1 + n/2 + 100)
// Big O(n/2 + 101)
// Big O(n + 1)
// Big O(n)

Rule 3 Different terms for input. Most important. DSA_Class_6_2.java

function compressBoxesTwice(boxes){
  boxes.forEach(function (boxes) {
    console.log(boxes);    
  });
  
  boxes.forEach(function (boxes) {
    console.log(boxes);    
  });
}
// O(2n) -> O(n)

what will happen if we have another box as boxes2 and second loop loopes over the second.

function compressBoxesTwice(boxes,boxes2){
  boxes.forEach(function (boxes) {
    console.log(boxes);    
  });
  
  boxes2.forEach(function (boxes) {
    console.log(boxes);    
  });
}

in interview many people tells that it is O(n) is this correct?
as third rule said that different terms of input.
in the above example boxes and boxes2 are 2 different inputs.
first box can be 100 item long or another item can be 1 item long.

the big O of above function will be // O(a + b)

now questions come to mind with if the loops are nested.

-----------
the most asked IV questiont is that Log all paires of array. DSA_Class_6_3.java
eg: 1,1| 1,2 | 1,3 | 1,4 | 1,5 | 2,1 | 2,2 ..... etc.
const boxes =[1,2,3,4,5];
function logAllPairsOfArray(array){
  for(let i=0;i<array.length;i++){
    for(let j=0;j<array.length;j++){
      console.log(array[i],array[j]);
    }
  }
}
logAllPairsOfArray(boxes);

//O(n*n) -- > O(n^2)

now what is the big O of this 
Note: when it comes to the nested loop it should be multiplication where as in case of seperate loops it is addition.
//O(n*n) -- > O(n^2)

it is also called as Quadratic Time.
it means everytime the number of times element increase eg we have 2 elements then we have 4 operations.
and if we have 3 elements than the number of opereations will be 9 so it increases quadraticly.

If we take a look on our graph it is in the category of horrible.
So now its time to bring back to the good.

Rule 4: Drop Non Dominant terms.
//1+1 | 1+2 | 1+3 | 1+4 | 1+5 | 2+1 | 2+2 | 2+3 .....etc 
function printAllNumbersThenAllPairSums(numbers) {
  console.log('these are the numbers:');
  numbers.forEach(function(number) {
    console.log(number);
  });

  console.log('and these are their sums:');
  numbers.forEach(function(firstNumber) {
    console.log(firstNumber);
    numbers.forEach(function(secondNumber) {
      console.log(firstNumber + secondNumber);
    });
  
  });
}
printAllNumbersThenAllPairSums([1,2,3,4,5])
// Big O(n + n^2)
// Big O(n^2)

eg if we have O(x^2+3x+100+x/2)
x=5
then 100 it the biggest but we have to take care of scale.
so the answer if O(x^2)

As the nuber of loops increases the number of powers increses O(x^2), O(x^3)...

you can reffer the cheat sheet if you have any doubt regarding the Big O: https://drive.google.com/file/d/1JE1jKMWdOKXkjTIx2mV8CxhFwyQpQNsX/view?usp=sharing
__________________________

We have lot may Big O notations left but we will conver then while learning the DSA as the work with the specific type of algorityhms.

https://www.bigocheatsheet.com/
Data Structure + Alogorithm = program
now question comes what is DS it us nothing but just the way to store the data. and the algorithms are the functions which uses the DS to wrote our program.

Every good programmer should know the DSA inorder to write the good program.
__________________________________
the new type of Big O is O(n!): factorial time.
this is the most costliest and most expesive or the steapest among all the notations of big O.

in this we are just simpley creating the nested loop for every input. and no one is using this.

 _______________

when it comes to scalable we have to take care of 2 things
	1. speed: 
	2. Memory: 
	
If you wanted to know the best code then you have to know the 3 pillers of your code.
1. readable
2. speed (Time complexity (Big O))
3. Memory: Space Complexity it uses same notation but different topics.

if we want more speed then we have less memory efficent
if we want more memory then we have less speed.

its time to learn the space complexity.
when the program execute we have 2 things to keep in mind that is:
	1. heap: it is the place where we store our variables.
	2. stack: take care of function execution
	
some time we have to configur our app with less memory instead of using less time.
with this we find how much memory is been used.

while running the fuction we know he it is running but we should know how space/memory it is taking.

What causes space complexity:
1. variables
2. DS
3. function call
4. Allocations

H/w- 
i want to display the instagram post if i click the bot it will display the most resent post
and also the first post i have uploaded on it.
the images are stored in the form of array.

------------------------------
solution:- DSA_Class_7
//find 1st and find nth...
const array = ['hi','my','teddy'];
array[0]; //O(1)
array[array.length-1]; //O(1)

------------------------------
Q2. now boss came and told me that i want to compare the dates of the post. for that i want
 you to look on every tweet and compare the dates.
 
Hint: create the date object in the arrya.


-------------------------------
Solutions:
const array = [{post:'hi',date: 2021},
               {post:'my',date: 2000},
               {post:'teddy',date: 2003}]; 

//O(n^2)
this is going to be very inefficent so i hvae to change the format to store the array.






